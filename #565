//Brute force .....in worst case scenario the time complexity is O(n2)


class Solution {
    public int arrayNesting(int[] nums) {
        int n = nums.length;
        HashSet<Integer> hs = new HashSet<>();
        int ans = 0;int count =0;
        for(int i = 0 ; i < n ; i++,count=0){
            
            
            while(!hs.contains(nums[i])){
                hs.add(nums[i]);
                i= nums[i];
                count++;
            }
            ans = Math.max(ans , count);
        }
        return ans;
    }
}
//GRAPH METHOD TC IS O(n)
class Solution {
    public int arrayNesting(int[] nums) {
        boolean[] visited=new boolean[nums.length];int count=0;int max=1;
        for(int i=0;i<nums.length;i++,count=0)
        {
            if(!visited[i])
            {
                while(!visited[i])
                {
                visited[i]=true;
                i=nums[i];
                count++;
                }
                
                
            }
           max= Math.max(max,count);
        }
        return max;
    }
}
