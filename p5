//brut force
class Solution {
    public Boolean palindrome(String str)
    {
        StringBuffer sb=new StringBuffer(str);
        sb.reverse();
        String rev=sb.toString();
            if(str.equals(rev)){
                return true;
            }
        
            return false;
        
    }
    public String longestPalindrome(String s) {
    int max=0;
        int l=0;
        String longest="";
        
        for(int i=0;i<s.length();i++)
        {
            for(int j=i;j<s.length();j++,l=0)
            {
               
           String sub=s.substring(i,j+1);
          if(palindrome(sub))
          {
               l=sub.length();
                if(l>max)
                {
                    max=l;
                 longest=sub;
                    
                }
                
            }
        }
        
        } 
        
        return longest;
    }
}
//dp
class Solution {
    public String longestPalindrome(String s) {
        int l=s.length();
        int max=0;int start=0;int j=0;int end =0;
        boolean dp[][]=new boolean[l][l];
        for(int i=0;i<l;i++)
        {
           
                    dp[i][i]=true; 
            max=1;
            
        }
         for(int i=0;i<l-1;i++)
        {
             if(s.charAt(i)==s.charAt(i+1))
                {
                    dp[i][i+1]=true;
                 start=i;
                 max=2;
                }
            
        }
         for(int k=3;k<=l;k++)
        {
            for(int i=0;i<l-k+1;i++)
             {
                 j=i+k-1;
                if(s.charAt(i)==s.charAt(j)&&dp[i+1][j-1])
                {
                    dp[i][j]=true;
                    if(k>max)
                    {
                        max=k;
                        start=i;
                       
                    }
                }
             }
           
            
        }
        return s.substring(start,start+max);
        
    }
}
